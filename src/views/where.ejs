<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Where</title>
    <script
      src="https://kit.fontawesome.com/d5fbb687f5.js"
      crossorigin="anonymous"
    ></script>
    <link rel="stylesheet" href="/css/style.css" type="text/css" />
  </head>

  <body class="wrapper">
    <h1>여긴 어디?</h1>
    <hr class="upper-hr" />

    <!-----------nav------------>
    <nav class="index-nav">
      <div class="btn-box">
        <div class="icon-btn">
          <a href="/" class="block"><i class="fas fa-home"></i></a>
        </div>
        <span>홈</span>
      </div>
      <div class="btn-box">
        <div class="icon-btn">
          <a href="/navs/howtocome" class="block"
            ><i class="fas fa-walking"></i
          ></a>
        </div>
        <span>세종 오는 길</span>
      </div>
      <div class="btn-box">
        <div class="icon-btn">
          <a href="/navs/tips" class="block"><i class="fas fa-pen"></i></a>
        </div>
        <span>세종 꿀팁</span>
      </div>
      <div class="btn-box">
        <div class="icon-btn">
          <a href="/navs/comments" class="block"
            ><i class="fas fa-comments"></i
          ></a>
        </div>
        <span>방명록</span>
      </div>
    </nav>

    <main class="where-main">
      <section class="where-intro">
        <span class="where-content"
          >정보를 알고 싶은 건물의 정면 사진을 업로드 해주세요.<br />이름을
          몰라도 괜찮아요. 인공지능이 어떤 건물인지 알려줄 거에요!</span
        >
      </section>
    </main>
    <section id="main-cont">
      <button type="button" class="start-btn" onclick="init()">
        <span class="start-btn__text">사진을 넣기 전 전원을 켜주세요!</span>
      </button>
    </section>

    <script
      class="jsbin"
      src="https://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js"
    ></script>

    <div class="file-upload hide">
      <div class="image-upload-wrap">
        <input
          class="file-upload-input"
          type="file"
          onchange="readURL(this);"
          accept="image/*"
        />
        <div class="drag-text">
          <h3>사진을 여기에 끌어 옮기거나, 클릭해서 사진을 선택하세요!</h3>
        </div>
      </div>
      <button type="button" class="predict-btn" onclick="predict()">
        예측 시작
      </button>
      <div class="file-upload-content">
        <img
          class="file-upload-image"
          id="building-image"
          src="#"
          alt="your image"
        />
        <div class="image-title-wrap">
          <button type="button" onclick="removeUpload()" class="remove-image">
            Remove <span class="image-title">Uploaded Image</span>
          </button>
        </div>
      </div>
    </div>

    <!-- 출력이 여기서 됌 -->
    <div id="label-container"></div>
    <div class="result">
      <div class="tellRes"></div>
      <div class="maxResult"></div>
    </div>

    <script
      src="https://code.jquery.com/jquery-3.4.1.slim.min.js"
      integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"
      integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"
      crossorigin="anonymous"
    ></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@0.8/dist/teachablemachine-image.min.js"></script>
    <script>
      function readURL(input) {
        if (input.files && input.files[0]) {
          var reader = new FileReader();

          reader.onload = function (e) {
            $(".image-upload-wrap").hide();

            $(".file-upload-image").attr("src", e.target.result);
            $(".file-upload-content").show();

            $(".image-title").html(input.files[0].name);
          };

          reader.readAsDataURL(input.files[0]);
        } else {
          removeUpload();
        }
      }

      function removeUpload() {
        $(".file-upload-input").replaceWith($(".file-upload-input").clone());
        $(".file-upload-content").hide();
        $(".image-upload-wrap").show();
      }
      $(".image-upload-wrap").bind("dragover", function () {
        $(".image-upload-wrap").addClass("image-dropping");
      });
      $(".image-upload-wrap").bind("dragleave", function () {
        $(".image-upload-wrap").removeClass("image-dropping");
      });
    </script>
    <script type="text/javascript">
      // More API functions here:
      // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/image

      // the link to your model provided by Teachable Machine export panel
      const URL = "https://teachablemachine.withgoogle.com/models/4isctdtLI/";

      let model, webcam, labelContainer, maxPredictions;

      // Load the image model and setup the webcam
      async function init() {
        const modelURL = URL + "model.json";
        const metadataURL = URL + "metadata.json";

        // load the model and metadata
        // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
        // or files from your local hard drive
        // Note: the pose library adds "tmImage" object to your window (window.tmImage)
        model = await tmImage.load(modelURL, metadataURL);
        maxPredictions = model.getTotalClasses();

        labelContainer = document.getElementById("label-container");
        for (let i = 0; i < maxPredictions; i++) {
          // and class labels
          labelContainer.appendChild(document.createElement("div"));
        }
      }

      // run the webcam image through the image model
      async function predict() {
        // predict can take in an image, video or canvas html element

        var image = document.getElementById("building-image");

        // 변수 설정
        const prediction = await model.predict(image, false);
        let maxRes = 0.0;
        const maxResult = document.querySelector(".maxResult");
        const tellRes = document.querySelector(".tellRes");
        const removeImg = document.querySelector(".remove-image");
        let maxBuilding;

        for (let i = 0; i < maxPredictions; i++) {
          const result = prediction[i].probability.toFixed(2);
          const resBuilding = prediction[i].className;
          const classPrediction =
            prediction[i].className +
            ": " +
            prediction[i].probability.toFixed(2);

          // labelContainer.childNodes[i].innerHTML = classPrediction;

          if (result > maxRes) {
            maxRes = result;
            maxBuilding = resBuilding;
          }
        }
        tellRes.innerHTML = "이 건물은 바로...!";
        maxResult.innerHTML = maxBuilding;

        removeImg.addEventListener("click", () => {
          tellRes.innerHTML = "";
          maxResult.innerHTML = "";
        });
      }
    </script>
    <!-- 숨기고 나오게 하기 -->
    <script>
      const startBtn = document.querySelector(".start-btn");
      const hide = document.querySelector(".hide");
      const removeLabel = document.querySelector(".remove-label");
      const fileUpload = document.querySelector(".file-upload");

      const startBtnText = document.querySelector(".start-btn__text");
      const afterClick = "전원이 켜졌습니다";
      const beforeClick = "사진을 넣기 전 전원을 켜주세요!";
      const sjBlue = "#334D61";
      const sjRed = "#C30E2E";

      startBtn.addEventListener("click", () => {
        fileUpload.classList.toggle("hide");
        let checkHide = fileUpload.classList.contains("hide");
        if (checkHide) {
          startBtnText.innerText = beforeClick;
          startBtn.style.backgroundColor = sjRed;
        } else {
          startBtnText.innerText = afterClick;
          startBtn.style.backgroundColor = sjBlue;
        }
      });
    </script>
    <div class="bg">
      <img class="where-img" src="/img/door.jpg" />
    </div>
  </body>
</html>
